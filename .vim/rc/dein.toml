[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = 'map <C-n> :NERDTreeToggle<CR>'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config={'cpp/g++' : {'cmdopt':'-std=c++11'},
            \'python':{'command':'python'},
            \'tex':{'command':'latexmk','outputter':'error','outputter/error/error':'quickfix',
            \'cmdopt':'-pdfdvi','exec':'%c %o %s'}}
let g:vimtex_compiler_latexmk={'callback':0}
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_echo_msg_format = '[%linter%] %s'
let g:ale_rust_cargo_use_check = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_sign_error = "✗"
let g:ale_sign_warning = "⚠"
let g:ale_linters = {
  \ 'python': ['flake8'],
  \ 'rust': ['cargo'],
  \ 'go': ['golint'],
  \ 'cpp': ['gcc'],
  \ 'c': ['gcc'],
  \}
let g:ale_fixers = {
  \ 'python': ['black'],
  \ 'rust': ['rustfmt'],
  \ 'go': ['gofmt'],
  \ 'cpp': ['uncrustify'],
  \ 'c': ['uncrustify'],
  \}
let g:ale_fix_on_save = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
"airlineの設定
set laststatus=2
let g:airline#extensions#branch#enable=1
let g:airline#extensions#tableline#enable=1
let g:airline#extensions#wordcount#enable=0
let g:airline#extensions#default#layout=[['a','b','c'],['x','y','z']]
let g:airline_section_c='%t'
let g:airline_section_x='%{&filetype}'
let g:airline_section_z='%31:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
let g:airline#extensions#ale#error_symbol=' '
let g:airline#extensions#ale#warnign_symbol=' '
let g:airline#extensions#default#section_truncate_width={}
let g:airline#extensions#whitespace#enabled=1
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
let g:neocomplete#enable_at_startup=1
let g:neocomplete#enable_smart_case=1
let g:neocomplete#min_keyword_length=3
let g:neocomplete#enable_auto_delimeter=1
let g:neocomplete#auto_completion_start_length=1
let g:acp_enableAtStartup=0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" " Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" " Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
"
" " Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
     \ 'default' : ''
     \ }

"
 " Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
 "<C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-e>  neocomplcache#cancel_popup()
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
imap <C-k>  <Plug>(neosnippet_expand_or_jump)
smap <C-k>  <Plug>(neosnippet_expand_or_jump)
xmap <C-k>  <Plug>(neosnippet_expand_target)
smap <expr><Tab> neosnippet#expandable_or_jumpable() ?
let g:neosnippet#snippets_directory='/home/yudai/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/snippets,~/.vim/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'airblade/vim-gitgutter'
